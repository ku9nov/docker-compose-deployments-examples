services:
  helloworld:
    build:
      context: ./hello-world 
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.helloworld.entrypoints=web" # required
      - "traefik.http.routers.helloworld.rule=Host(`backend.example.com`) && Path(`/`)" # required
      - "traefik.http.services.helloworld.loadbalancer.server.port=8000" # required
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.path=/health" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.interval=10s" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.timeout=1s" # optional

      - "traefik.http.services.helloworld.loadbalancer.healthCheck.scheme=http" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.mode=http" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.hostname=backend.example.com" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.port=8000" # optional

      - "traefik.http.services.helloworld.loadbalancer.healthCheck.headers.My-Custom-Header=foo" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.headers.My-Header=bar" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.followRedirects=true" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.method=GET" # optional
      - "traefik.http.services.helloworld.loadbalancer.healthCheck.status=200" # optional
    deploy:
      replicas: 2
    restart: unless-stopped
    networks:
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 5s

  helloworld-front:
    build:
      context: ./hello-world-front
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.helloworld-front.entrypoints=web" # required
      - "traefik.http.routers.helloworld-front.rule=Host(`frontend.example.com`)" # required
      - "traefik.http.services.helloworld-front.loadbalancer.server.port=80" # required
      - "traefik.http.services.helloworld-front.loadbalancer.healthCheck.path=/" # optional
      - "traefik.http.services.helloworld-front.loadbalancer.healthCheck.interval=10s" # optional
      - "traefik.http.services.helloworld-front.loadbalancer.healthCheck.timeout=1s" # optional
    deploy:
      replicas: 2
    restart: unless-stopped
    networks:
      - traefik

  traefik-proxy:
    image: traefik:v3.3.4
    command:
      - --api.insecure=true
      # - --providers.docker=true (optional for specific needs)
      # - --providers.docker.endpoint=tcp://socket-proxy:2375
      # - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --providers.file.directory=/etc/traefik # it's important to use dir here (traefik bug https://community.traefik.io/t/trying-dynamic-configurations-for-traefik/21811/12)
      - --providers.file.watch=true
    restart: unless-stopped
    ports:
      - "8000:80"
      - "8080:8080"
    volumes:
      - ./traefik:/etc/traefik:ro
    networks:
      - traefik
    # depends_on:
    #   - socket-proxy

  # socket-proxy: (optional for specific needs)
  #   image: tecnativa/docker-socket-proxy
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - traefik
  #   environment:
  #     CONTAINERS: 1
  #   restart: unless-stopped

networks:
  traefik:
    driver: bridge